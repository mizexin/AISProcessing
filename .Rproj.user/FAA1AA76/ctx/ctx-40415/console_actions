{
    "type": [
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        0,
        1,
        3,
        3,
        3,
        3,
        0,
        1,
        0,
        1,
        0,
        1,
        3,
        0,
        1,
        3,
        0,
        1,
        2,
        0,
        1,
        3,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        3,
        0,
        1,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        0,
        1,
        3,
        0,
        1,
        3,
        0,
        1,
        3,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        3,
        3,
        3,
        3,
        0,
        1,
        0,
        1,
        3,
        3,
        3,
        3,
        0,
        1,
        0,
        1,
        0,
        1,
        3,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        3,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        3,
        3,
        3,
        3,
        0,
        1,
        0,
        1,
        0,
        1,
        3,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        3,
        3,
        3,
        3,
        0,
        1,
        0,
        1,
        0,
        1,
        3,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        3,
        0,
        1,
        3,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        3,
        3,
        3,
        3,
        3,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        3,
        0,
        1,
        3,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        3,
        0,
        1,
        3,
        0,
        1,
        0,
        1,
        0,
        1,
        3,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        3,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        3,
        3,
        3,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        2,
        3,
        3,
        0,
        1,
        0,
        1,
        0,
        1,
        3,
        3,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        3,
        3,
        3,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        3,
        3,
        3,
        3,
        0,
        1,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        2,
        0,
        1,
        3,
        0,
        1,
        2,
        0,
        1,
        2
    ],
    "data": [
        "                     y = rnorm(1000, +1, .4))",
        "> ",
        "X = rbind(group1, group2)",
        "> ",
        "### Add an obvious outlier which is within the 1d ranges",
        "> ",
        "### (As an interesting test, remove the outlier and see what happens,",
        "> ",
        "###  or check how its score changes when using sub-sampling or",
        "> ",
        "###  changing the scoring metric for 'ndim=1')",
        "> ",
        "X = rbind(X, c(-1, 1))",
        "> ",
        "View(X)",
        "> ",
        "### Produce heatmaps",
        "> ",
        "pts = seq(-3, 3, .1)",
        "> ",
        "space_d <- expand.grid(x = pts, y = pts)",
        "> ",
        "plot.space <- function(Z, ttl) {",
        "+ ",
        "  image(pts, pts, matrix(Z, nrow = length(pts)),",
        "+ ",
        "        col = rev(heat.colors(50)),",
        "+ ",
        "        main = ttl, cex.main = 1.4,",
        "+ ",
        "        xlim = c(-3, 3), ylim = c(-3, 3),",
        "+ ",
        "        xlab = \"\", ylab = \"\")",
        "+ ",
        "  par(new = TRUE)",
        "+ ",
        "  plot(X, type = \"p\", xlim = c(-3, 3), ylim = c(-3, 3),",
        "+ ",
        "       col = \"#0000801A\",",
        "+ ",
        "       axes = FALSE, main = \"\",",
        "+ ",
        "       xlab = \"\", ylab = \"\")",
        "+ ",
        "}",
        "> ",
        "### Single-variable model",
        "> ",
        "iso_simple = isolation.forest(",
        "+ ",
        "  X, ndim=1,",
        "+ ",
        "  ntrees=100,",
        "+ ",
        "  nthreads=1,",
        "+ ",
        "  penalize_range=FALSE,",
        "+ ",
        "  prob_pick_pooled_gain=0,",
        "+ ",
        "  prob_pick_avg_gain=0)",
        "> ",
        "Z1 <- predict(iso_simple, space_d)",
        "> ",
        "plot.space(Z1, \"Isolation Forest\")",
        "> ",
        "### Extended model",
        "> ",
        "iso_ext = isolation.forest(",
        "+ ",
        "  X, ndim=2,",
        "+ ",
        "  ntrees=100,",
        "+ ",
        "  nthreads=1,",
        "+ ",
        "  penalize_range=FALSE,",
        "+ ",
        "  prob_pick_pooled_gain=0,",
        "+ ",
        "  prob_pick_avg_gain=0)",
        "> ",
        "Z2 <- predict(iso_ext, space_d)",
        "> ",
        "plot.space(Z2, \"Extended Isolation Forest\")",
        "> ",
        "### SCiForest",
        "> ",
        "iso_sci = isolation.forest(",
        "+ ",
        "  X, ndim=2, ntry=1,",
        "+ ",
        "  coefs=\"normal\",",
        "+ ",
        "  ntrees=100,",
        "+ ",
        "  nthreads=1,",
        "+ ",
        "  penalize_range=TRUE,",
        "+ ",
        "  prob_pick_pooled_gain=0,",
        "+ ",
        "  prob_pick_avg_gain=1)",
        "> ",
        "Z3 <- predict(iso_sci, space_d)",
        "> ",
        "plot.space(Z3, \"SCiForest\")",
        "> ",
        "### Fair-cut forest",
        "> ",
        "iso_fcf = isolation.forest(",
        "+ ",
        "  X, ndim=2,",
        "+ ",
        "  ntrees=100,",
        "+ ",
        "  nthreads=1,",
        "+ ",
        "  penalize_range=FALSE,",
        "+ ",
        "  prob_pick_pooled_gain=1,",
        "+ ",
        "  prob_pick_avg_gain=0)",
        "> ",
        "Z4 <- predict(iso_fcf, space_d)",
        "> ",
        "plot.space(Z4, \"Fair-Cut Forest\")",
        "> ",
        "par(oldpar)",
        "> ",
        "library(plyr)",
        "> ",
        "library(readr)",
        "> ",
        "library(data.table)",
        "> ",
        "library(dplyr)",
        "> ",
        "library(lubridate)",
        "> ",
        "library(maps)",
        "> ",
        "library(fpc)",
        "> ",
        "library(factoextra)",
        "> ",
        "library(leaflet)",
        "> ",
        "library(plotly)",
        "> ",
        "#AIS文件整合",
        "> ",
        "# dir = \"~/AIS/2020_year_container\" ",
        "> ",
        "# file_list = list.files(path = dir, pattern = \"*.csv$\",recursive = TRUE,full.names = TRUE)  ",
        "> ",
        "# store_csv = paste(dir,\"new.csv\")         ",
        "> ",
        "# for(i in 1:length(file_list)) ",
        "> ",
        "# {",
        "> ",
        "# df = fread(file = file_list[i],encoding = 'UTF-8', nThread = 12,verbose = T)",
        "> ",
        "# fwrite(df,file = store_csv,append = TRUE)              ",
        "> ",
        "# }",
        "> ",
        "",
        "> ",
        "# dir = \"~/AIS/2020_year_container\" ",
        "> ",
        "# file_list = list.files(path = dir, pattern = \"*.csv$\",recursive = TRUE,full.names = TRUE)  ",
        "> ",
        "# for(i in 1:length(file_list)) ",
        "> ",
        "# {",
        "> ",
        "# df = fread(file = file_list[i],encoding = 'UTF-8', nThread = 12,verbose = T)",
        "> ",
        "# fwrite(df,file = store_csv,append = TRUE)              ",
        "> ",
        "# }",
        "> ",
        "",
        "> ",
        "AIS_test <- fread(\"~/AIS/2019_year_container/ 518955000 .csv\",showProgress = T, nThread = 12)%>%arrange(time)",
        "> ",
        "AIS_test$time <- as.POSIXct(AIS_test$time, origin=\"1970-01-01\")",
        "> ",
        "AIS_test$lat <- AIS_test$lat/1000000",
        "> ",
        "AIS_test$lon <- AIS_test$lon/1000000",
        "> ",
        "",
        "> ",
        "",
        "> ",
        "test <- subset(AIS_test,select = c('lon','lat'))",
        "> ",
        "View(test)",
        "> ",
        "is.na(test)",
        "           lon   lat\n    [1,] FALSE FALSE\n    [2,] FALSE FALSE\n    [3,] FALSE FALSE\n    [4,] FALSE FALSE\n    [5,] FALSE FALSE\n    [6,] FALSE FALSE\n    [7,] FALSE FALSE\n    [8,] FALSE FALSE\n    [9,] FALSE FALSE\n   [10,] FALSE FALSE\n   [11,] FALSE FALSE\n   [12,] FALSE FALSE\n   [13,] FALSE FALSE\n   [14,] FALSE FALSE\n   [15,] FALSE FALSE\n   [16,] FALSE FALSE\n   [17,] FALSE FALSE\n   [18,] FALSE FALSE\n   [19,] FALSE FALSE\n   [20,] FALSE FALSE\n   [21,] FALSE FALSE\n   [22,] FALSE FALSE\n   [23,] FALSE FALSE\n   [24,]",
        " FALSE FALSE\n   [25,] FALSE FALSE\n   [26,] FALSE FALSE\n   [27,] FALSE FALSE\n   [28,] FALSE FALSE\n   [29,] FALSE FALSE\n   [30,] FALSE FALSE\n   [31,] FALSE FALSE\n   [32,] FALSE FALSE\n   [33,] FALSE FALSE\n   [34,] FALSE FALSE\n   [35,] FALSE FALSE\n   [36,] FALSE FALSE\n   [37,] FALSE FALSE\n   [38,] FALSE FALSE\n   [39,] FALSE FALSE\n   [40,] FALSE FALSE\n   [41,] FALSE FALSE\n   [42,] FALSE FALSE\n   [43,] FALSE FALSE\n   [44,] FALSE FALSE\n   [45,] FALSE FALSE\n   [46,] FALSE FALSE\n   [47,] FALSE FALSE\n   [48,] FALSE FALSE",
        "\n   [49,] FALSE FALSE\n   [50,] FALSE FALSE\n   [51,] FALSE FALSE\n   [52,] FALSE FALSE\n   [53,] FALSE FALSE\n   [54,] FALSE FALSE\n   [55,] FALSE FALSE\n   [56,] FALSE FALSE\n   [57,] FALSE FALSE\n   [58,] FALSE FALSE\n   [59,] FALSE FALSE\n   [60,] FALSE FALSE\n   [61,] FALSE FALSE\n   [62,] FALSE FALSE\n   [63,] FALSE FALSE\n   [64,] FALSE FALSE\n   [65,] FALSE FALSE\n   [66,] FALSE FALSE\n   [67,] FALSE FALSE\n   [68,] FALSE FALSE\n   [69,] FALSE FALSE\n   [70,] FALSE FALSE\n   [71,] FALSE FALSE\n   [72,] FALSE FALSE\n   [73,]",
        " FALSE FALSE\n   [74,] FALSE FALSE\n   [75,] FALSE FALSE\n   [76,] FALSE FALSE\n   [77,] FALSE FALSE\n   [78,] FALSE FALSE\n   [79,] FALSE FALSE\n   [80,] FALSE FALSE\n   [81,] FALSE FALSE\n   [82,] FALSE FALSE\n   [83,] FALSE FALSE\n   [84,] FALSE FALSE\n   [85,] FALSE FALSE\n   [86,] FALSE FALSE\n   [87,] FALSE FALSE\n   [88,] FALSE FALSE\n   [89,] FALSE FALSE\n   [90,] FALSE FALSE\n   [91,] FALSE FALSE\n   [92,] FALSE FALSE\n   [93,] FALSE FALSE\n   [94,] FALSE FALSE\n   [95,] FALSE FALSE\n   [96,] FALSE FALSE\n   [97,] FALSE FALSE",
        "\n   [98,] FALSE FALSE\n   [99,] FALSE FALSE\n  [100,] FALSE FALSE\n  [101,] FALSE FALSE\n  [102,] FALSE FALSE\n  [103,] FALSE FALSE\n  [104,] FALSE FALSE\n  [105,] FALSE FALSE\n  [106,] FALSE FALSE\n  [107,] FALSE FALSE\n  [108,] FALSE FALSE\n  [109,] FALSE FALSE\n  [110,] FALSE FALSE\n  [111,] FALSE FALSE\n  [112,] FALSE FALSE\n  [113,] FALSE FALSE\n  [114,] FALSE FALSE\n  [115,] FALSE FALSE\n  [116,] FALSE FALSE\n  [117,] FALSE FALSE\n  [118,] FALSE FALSE\n  [119,] FALSE FALSE\n  [120,] FALSE FALSE\n  [121,] FALSE FALSE\n  [122,]",
        " FALSE FALSE\n  [123,] FALSE FALSE\n  [124,] FALSE FALSE\n  [125,] FALSE FALSE\n  [126,] FALSE FALSE\n  [127,] FALSE FALSE\n  [128,] FALSE FALSE\n  [129,] FALSE FALSE\n  [130,] FALSE FALSE\n  [131,] FALSE FALSE\n  [132,] FALSE FALSE\n  [133,] FALSE FALSE\n  [134,] FALSE FALSE\n  [135,] FALSE FALSE\n  [136,] FALSE FALSE\n  [137,] FALSE FALSE\n  [138,] FALSE FALSE\n  [139,] FALSE FALSE\n  [140,] FALSE FALSE\n  [141,] FALSE FALSE\n  [142,] FALSE FALSE\n  [143,] FALSE FALSE\n  [144,] FALSE FALSE\n  [145,] FALSE FALSE\n  [146,] FALSE FALSE",
        "\n  [147,] FALSE FALSE\n  [148,] FALSE FALSE\n  [149,] FALSE FALSE\n  [150,] FALSE FALSE\n  [151,] FALSE FALSE\n  [152,] FALSE FALSE\n  [153,] FALSE FALSE\n  [154,] FALSE FALSE\n  [155,] FALSE FALSE\n  [156,] FALSE FALSE\n  [157,] FALSE FALSE\n  [158,] FALSE FALSE\n  [159,] FALSE FALSE\n  [160,] FALSE FALSE\n  [161,] FALSE FALSE\n  [162,] FALSE FALSE\n  [163,] FALSE FALSE\n  [164,] FALSE FALSE\n  [165,] FALSE FALSE\n  [166,] FALSE FALSE\n  [167,] FALSE FALSE\n  [168,] FALSE FALSE\n  [169,] FALSE FALSE\n  [170,] FALSE FALSE\n  [171,]",
        " FALSE FALSE\n  [172,] FALSE FALSE\n  [173,] FALSE FALSE\n  [174,] FALSE FALSE\n  [175,] FALSE FALSE\n  [176,] FALSE FALSE\n  [177,] FALSE FALSE\n  [178,] FALSE FALSE\n  [179,] FALSE FALSE\n  [180,] FALSE FALSE\n  [181,] FALSE FALSE\n  [182,] FALSE FALSE\n  [183,] FALSE FALSE\n  [184,] FALSE FALSE\n  [185,] FALSE FALSE\n  [186,] FALSE FALSE\n  [187,] FALSE FALSE\n  [188,] FALSE FALSE\n  [189,] FALSE FALSE\n  [190,] FALSE FALSE\n  [191,] FALSE FALSE\n  [192,] FALSE FALSE\n  [193,] FALSE FALSE\n  [194,] FALSE FALSE\n  [195,] FALSE FALSE",
        "\n  [196,] FALSE FALSE\n  [197,] FALSE FALSE\n  [198,] FALSE FALSE\n  [199,] FALSE FALSE\n  [200,] FALSE FALSE\n  [201,] FALSE FALSE\n  [202,] FALSE FALSE\n  [203,] FALSE FALSE\n  [204,] FALSE FALSE\n  [205,] FALSE FALSE\n  [206,] FALSE FALSE\n  [207,] FALSE FALSE\n  [208,] FALSE FALSE\n  [209,] FALSE FALSE\n  [210,] FALSE FALSE\n  [211,] FALSE FALSE\n  [212,] FALSE FALSE\n  [213,] FALSE FALSE\n  [214,] FALSE FALSE\n  [215,] FALSE FALSE\n  [216,] FALSE FALSE\n  [217,] FALSE FALSE\n  [218,] FALSE FALSE\n  [219,] FALSE FALSE\n  [220,]",
        " FALSE FALSE\n  [221,] FALSE FALSE\n  [222,] FALSE FALSE\n  [223,] FALSE FALSE\n  [224,] FALSE FALSE\n  [225,] FALSE FALSE\n  [226,] FALSE FALSE\n  [227,] FALSE FALSE\n  [228,] FALSE FALSE\n  [229,] FALSE FALSE\n  [230,] FALSE FALSE\n  [231,] FALSE FALSE\n  [232,] FALSE FALSE\n  [233,] FALSE FALSE\n  [234,] FALSE FALSE\n  [235,] FALSE FALSE\n  [236,] FALSE FALSE\n  [237,] FALSE FALSE\n  [238,] FALSE FALSE\n  [239,] FALSE FALSE\n  [240,] FALSE FALSE\n  [241,] FALSE FALSE\n  [242,] FALSE FALSE\n  [243,] FALSE FALSE\n  [244,] FALSE FALSE",
        "\n  [245,] FALSE FALSE\n  [246,] FALSE FALSE\n  [247,] FALSE FALSE\n  [248,] FALSE FALSE\n  [249,] FALSE FALSE\n  [250,] FALSE FALSE\n  [251,] FALSE FALSE\n  [252,] FALSE FALSE\n  [253,] FALSE FALSE\n  [254,] FALSE FALSE\n  [255,] FALSE FALSE\n  [256,] FALSE FALSE\n  [257,] FALSE FALSE\n  [258,] FALSE FALSE\n  [259,] FALSE FALSE\n  [260,] FALSE FALSE\n  [261,] FALSE FALSE\n  [262,] FALSE FALSE\n  [263,] FALSE FALSE\n  [264,] FALSE FALSE\n  [265,] FALSE FALSE\n  [266,] FALSE FALSE\n  [267,] FALSE FALSE\n  [268,] FALSE FALSE\n  [269,]",
        " FALSE FALSE\n  [270,] FALSE FALSE\n  [271,] FALSE FALSE\n  [272,] FALSE FALSE\n  [273,] FALSE FALSE\n  [274,] FALSE FALSE\n  [275,] FALSE FALSE\n  [276,] FALSE FALSE\n  [277,] FALSE FALSE\n  [278,] FALSE FALSE\n  [279,] FALSE FALSE\n  [280,] FALSE FALSE\n  [281,] FALSE FALSE\n  [282,] FALSE FALSE\n  [283,] FALSE FALSE\n  [284,] FALSE FALSE\n  [285,] FALSE FALSE\n  [286,] FALSE FALSE\n  [287,] FALSE FALSE\n  [288,] FALSE FALSE\n  [289,] FALSE FALSE\n  [290,] FALSE FALSE\n  [291,] FALSE FALSE\n  [292,] FALSE FALSE\n  [293,] FALSE FALSE",
        "\n  [294,] FALSE FALSE\n  [295,] FALSE FALSE\n  [296,] FALSE FALSE\n  [297,] FALSE FALSE\n  [298,] FALSE FALSE\n  [299,] FALSE FALSE\n  [300,] FALSE FALSE\n  [301,] FALSE FALSE\n  [302,] FALSE FALSE\n  [303,] FALSE FALSE\n  [304,] FALSE FALSE\n  [305,] FALSE FALSE\n  [306,] FALSE FALSE\n  [307,] FALSE FALSE\n  [308,] FALSE FALSE\n  [309,] FALSE FALSE\n  [310,] FALSE FALSE\n  [311,] FALSE FALSE\n  [312,] FALSE FALSE\n  [313,] FALSE FALSE\n  [314,] FALSE FALSE\n  [315,] FALSE FALSE\n  [316,] FALSE FALSE\n  [317,] FALSE FALSE\n  [318,]",
        " FALSE FALSE\n  [319,] FALSE FALSE\n  [320,] FALSE FALSE\n  [321,] FALSE FALSE\n  [322,] FALSE FALSE\n  [323,] FALSE FALSE\n  [324,] FALSE FALSE\n  [325,] FALSE FALSE\n  [326,] FALSE FALSE\n  [327,] FALSE FALSE\n  [328,] FALSE FALSE\n  [329,] FALSE FALSE\n  [330,] FALSE FALSE\n  [331,] FALSE FALSE\n  [332,] FALSE FALSE\n  [333,] FALSE FALSE\n  [334,] FALSE FALSE\n  [335,] FALSE FALSE\n  [336,] FALSE FALSE\n  [337,] FALSE FALSE\n  [338,] FALSE FALSE\n  [339,] FALSE FALSE\n  [340,] FALSE FALSE\n  [341,] FALSE FALSE\n  [342,] FALSE FALSE",
        "\n  [343,] FALSE FALSE\n  [344,] FALSE FALSE\n  [345,] FALSE FALSE\n  [346,] FALSE FALSE\n  [347,] FALSE FALSE\n  [348,] FALSE FALSE\n  [349,] FALSE FALSE\n  [350,] FALSE FALSE\n  [351,] FALSE FALSE\n  [352,] FALSE FALSE\n  [353,] FALSE FALSE\n  [354,] FALSE FALSE\n  [355,] FALSE FALSE\n  [356,] FALSE FALSE\n  [357,] FALSE FALSE\n  [358,] FALSE FALSE\n  [359,] FALSE FALSE\n  [360,] FALSE FALSE\n  [361,] FALSE FALSE\n  [362,] FALSE FALSE\n  [363,] FALSE FALSE\n  [364,] FALSE FALSE\n  [365,] FALSE FALSE\n  [366,] FALSE FALSE\n  [367,]",
        " FALSE FALSE\n  [368,] FALSE FALSE\n  [369,] FALSE FALSE\n  [370,] FALSE FALSE\n  [371,] FALSE FALSE\n  [372,] FALSE FALSE\n  [373,] FALSE FALSE\n  [374,] FALSE FALSE\n  [375,] FALSE FALSE\n  [376,] FALSE FALSE\n  [377,] FALSE FALSE\n  [378,] FALSE FALSE\n  [379,] FALSE FALSE\n  [380,] FALSE FALSE\n  [381,] FALSE FALSE\n  [382,] FALSE FALSE\n  [383,] FALSE FALSE\n  [384,] FALSE FALSE\n  [385,] FALSE FALSE\n  [386,] FALSE FALSE\n  [387,] FALSE FALSE\n  [388,] FALSE FALSE\n  [389,] FALSE FALSE\n  [390,] FALSE FALSE\n  [391,] FALSE FALSE",
        "\n  [392,] FALSE FALSE\n  [393,] FALSE FALSE\n  [394,] FALSE FALSE\n  [395,] FALSE FALSE\n  [396,] FALSE FALSE\n  [397,] FALSE FALSE\n  [398,] FALSE FALSE\n  [399,] FALSE FALSE\n  [400,] FALSE FALSE\n  [401,] FALSE FALSE\n  [402,] FALSE FALSE\n  [403,] FALSE FALSE\n  [404,] FALSE FALSE\n  [405,] FALSE FALSE\n  [406,] FALSE FALSE\n  [407,] FALSE FALSE\n  [408,] FALSE FALSE\n  [409,] FALSE FALSE\n  [410,] FALSE FALSE\n  [411,] FALSE FALSE\n  [412,] FALSE FALSE\n  [413,] FALSE FALSE\n  [414,] FALSE FALSE\n  [415,] FALSE FALSE\n  [416,]",
        " FALSE FALSE\n  [417,] FALSE FALSE\n  [418,] FALSE FALSE\n  [419,] FALSE FALSE\n  [420,] FALSE FALSE\n  [421,] FALSE FALSE\n  [422,] FALSE FALSE\n  [423,] FALSE FALSE\n  [424,] FALSE FALSE\n  [425,] FALSE FALSE\n  [426,] FALSE FALSE\n  [427,] FALSE FALSE\n  [428,] FALSE FALSE\n  [429,] FALSE FALSE\n  [430,] FALSE FALSE\n  [431,] FALSE FALSE\n  [432,] FALSE FALSE\n  [433,] FALSE FALSE\n  [434,] FALSE FALSE\n  [435,] FALSE FALSE\n  [436,] FALSE FALSE\n  [437,] FALSE FALSE\n  [438,] FALSE FALSE\n  [439,] FALSE FALSE\n  [440,] FALSE FALSE",
        "\n  [441,] FALSE FALSE\n  [442,] FALSE FALSE\n  [443,] FALSE FALSE\n  [444,] FALSE FALSE\n  [445,] FALSE FALSE\n  [446,] FALSE FALSE\n  [447,] FALSE FALSE\n  [448,] FALSE FALSE\n  [449,] FALSE FALSE\n  [450,] FALSE FALSE\n  [451,] FALSE FALSE\n  [452,] FALSE FALSE\n  [453,] FALSE FALSE\n  [454,] FALSE FALSE\n  [455,] FALSE FALSE\n  [456,] FALSE FALSE\n  [457,] FALSE FALSE\n  [458,] FALSE FALSE\n  [459,] FALSE FALSE\n  [460,] FALSE FALSE\n  [461,] FALSE FALSE\n  [462,] FALSE FALSE\n  [463,] FALSE FALSE\n  [464,] FALSE FALSE\n  [465,]",
        " FALSE FALSE\n  [466,] FALSE FALSE\n  [467,] FALSE FALSE\n  [468,] FALSE FALSE\n  [469,] FALSE FALSE\n  [470,] FALSE FALSE\n  [471,] FALSE FALSE\n  [472,] FALSE FALSE\n  [473,] FALSE FALSE\n  [474,] FALSE FALSE\n  [475,] FALSE FALSE\n  [476,] FALSE FALSE\n  [477,] FALSE FALSE\n  [478,] FALSE FALSE\n  [479,] FALSE FALSE\n  [480,] FALSE FALSE\n  [481,] FALSE FALSE\n  [482,] FALSE FALSE\n  [483,] FALSE FALSE\n  [484,] FALSE FALSE\n  [485,] FALSE FALSE\n  [486,] FALSE FALSE\n  [487,] FALSE FALSE\n  [488,] FALSE FALSE\n  [489,] FALSE FALSE",
        "\n  [490,] FALSE FALSE\n  [491,] FALSE FALSE\n  [492,] FALSE FALSE\n  [493,] FALSE FALSE\n  [494,] FALSE FALSE\n  [495,] FALSE FALSE\n  [496,] FALSE FALSE\n  [497,] FALSE FALSE\n  [498,] FALSE FALSE\n  [499,] FALSE FALSE\n  [500,] FALSE FALSE\n [ reached getOption(\"max.print\") -- omitted 13891 rows ]\n",
        "> ",
        "r = isolation.forest(test,ntrees = 10, nthreads = 10)",
        "Warning message:\n",
        "In isolation.forest(test, ntrees = 10, nthreads = 10) :",
        "\n ",
        " Attempting to use more than 1 thread, but package was compiled without OpenMP support. See https://mac.r-project.org/openmp/\n",
        "> ",
        "pred <- predict(r, test)",
        "> ",
        "cat(\"Point with highest outlier score: \",",
        "+ ",
        "    data[which.max(pred), ], \"\\n\")",
        "Error in data[which.max(pred), ] : \n  object of type 'closure' is not subsettable\n",
        "> ",
        "data[which.max(pred), ]",
        "Error in data[which.max(pred), ] : \n  object of type 'closure' is not subsettable\n",
        "> ",
        "which.max(pred)",
        "11867 \n11867 \n",
        "> ",
        "data[which.max(pred)]",
        "Error in data[which.max(pred)] : \n  object of type 'closure' is not subsettable\n",
        "> ",
        "library('isotree')",
        "> ",
        "",
        "> ",
        "### Example 1: detect an obvious outlier",
        "> ",
        "### (Random data from a standard normal distribution)",
        "> ",
        "library(isotree)",
        "> ",
        "set.seed(1)",
        "> ",
        "m <- 100",
        "> ",
        "n <- 2",
        "> ",
        "X <- matrix(rnorm(m * n), nrow = m)",
        "> ",
        "",
        "> ",
        "### Will now add obvious outlier point (3, 3) to the data",
        "> ",
        "X <- rbind(X, c(3, 3))",
        "> ",
        "",
        "> ",
        "### Fit a small isolation forest model",
        "> ",
        "iso <- isolation.forest(X, ntrees = 10, nthreads = 1)",
        "> ",
        "### Will now add obvious outlier point (3, 3) to the data",
        "> ",
        "X <- rbind(X, c(3, 3))",
        "> ",
        "data[11867,]",
        "Error in data[11867, ] : object of type 'closure' is not subsettable\n",
        "> ",
        "data(11867 ,)",
        "Warning messages:\n",
        "1: ",
        "In data(11867, ) :",
        " data set ‘11867’ not found\n",
        "2: ",
        "In data(11867, ) :",
        " data set ‘’ not found\n",
        "> ",
        "data[2,2]",
        "Error in data[2, 2] : object of type 'closure' is not subsettable\n",
        "> ",
        "data[1:]",
        "Error: unexpected ']' in \"data[1:]\"\n",
        "> ",
        "data$100",
        "Error: unexpected numeric constant in \"data$100\"\n",
        "> ",
        "library(plyr)",
        "> ",
        "library(readr)",
        "> ",
        "library(data.table)",
        "> ",
        "library(dplyr)",
        "> ",
        "library(lubridate)",
        "> ",
        "library(maps)",
        "> ",
        "library(fpc)",
        "> ",
        "library(factoextra)",
        "> ",
        "library(leaflet)",
        "> ",
        "library(plotly)",
        "> ",
        "#AIS文件整合",
        "> ",
        "# dir = \"~/AIS/2020_year_container\" ",
        "> ",
        "# file_list = list.files(path = dir, pattern = \"*.csv$\",recursive = TRUE,full.names = TRUE)  ",
        "> ",
        "# store_csv = paste(dir,\"new.csv\")         ",
        "> ",
        "# for(i in 1:length(file_list)) ",
        "> ",
        "# {",
        "> ",
        "# df = fread(file = file_list[i],encoding = 'UTF-8', nThread = 12,verbose = T)",
        "> ",
        "# fwrite(df,file = store_csv,append = TRUE)              ",
        "> ",
        "# }",
        "> ",
        "",
        "> ",
        "# dir = \"~/AIS/2020_year_container\" ",
        "> ",
        "# file_list = list.files(path = dir, pattern = \"*.csv$\",recursive = TRUE,full.names = TRUE)  ",
        "> ",
        "# for(i in 1:length(file_list)) ",
        "> ",
        "# {",
        "> ",
        "# df = fread(file = file_list[i],encoding = 'UTF-8', nThread = 12,verbose = T)",
        "> ",
        "# fwrite(df,file = store_csv,append = TRUE)              ",
        "> ",
        "# }",
        "> ",
        "",
        "> ",
        "AIS_test <- fread(\"~/AIS/2019_year_container/ 518955000 .csv\",showProgress = T, nThread = 12)%>%arrange(time)",
        "> ",
        "AIS_test$time <- as.POSIXct(AIS_test$time, origin=\"1970-01-01\")",
        "> ",
        "AIS_test$lat <- AIS_test$lat/1000000",
        "> ",
        "AIS_test$lon <- AIS_test$lon/1000000",
        "> ",
        "test <- subset(AIS_test,select = c('lon','lat'))",
        "> ",
        "r = isolation.forest(test,ntrees = 10, nthreads = 10)",
        "Warning message:\n",
        "In isolation.forest(test, ntrees = 10, nthreads = 10) :",
        "\n ",
        " Attempting to use more than 1 thread, but package was compiled without OpenMP support. See https://mac.r-project.org/openmp/\n",
        "> ",
        "test <- data.table(subset(AIS_test,select = c('lon','lat')))",
        "> ",
        "r = isolation.forest(test,ntrees = 10, nthreads = 10)",
        "Warning message:\n",
        "In isolation.forest(test, ntrees = 10, nthreads = 10) :",
        "\n ",
        " Attempting to use more than 1 thread, but package was compiled without OpenMP support. See https://mac.r-project.org/openmp/\n",
        "> ",
        "pred <- predict(r, test)",
        "> ",
        "cat(\"Point with highest outlier score: \",",
        "+ ",
        "    data[which.max(pred), ], \"\\n\")",
        "Error in data[which.max(pred), ] : \n  object of type 'closure' is not subsettable\n",
        "> ",
        "m <- 100",
        "> ",
        "n <- 2",
        "> ",
        "X <- matrix(rnorm(m * n), nrow = m)",
        "> ",
        "",
        "> ",
        "### Will now add obvious outlier point (3, 3) to the data",
        "> ",
        "X <- rbind(X, c(3, 3))",
        "> ",
        "View(X)",
        "> ",
        "mode(X)",
        "[1] \"numeric\"\n",
        "> ",
        "type(X)",
        "Error in type(X) : could not find function \"type\"\n",
        "> ",
        "class(X)",
        "[1] \"matrix\" \"array\" \n",
        "> ",
        "test <- matrix(subset(AIS_test,select = c('lon','lat')))",
        "> ",
        "View(test)",
        "> ",
        "test <- as.matrix(subset(AIS_test,select = c('lon','lat')))",
        "> ",
        "r = isolation.forest(test,ntrees = 10, nthreads = 10)",
        "Warning message:\n",
        "In isolation.forest(test, ntrees = 10, nthreads = 10) :",
        "\n ",
        " Attempting to use more than 1 thread, but package was compiled without OpenMP support. See https://mac.r-project.org/openmp/\n",
        "> ",
        "pred <- predict(r, test)",
        "> ",
        "cat(\"Point with highest outlier score: \",",
        "+ ",
        "    data[which.max(pred), ], \"\\n\")",
        "Error in data[which.max(pred), ] : \n  object of type 'closure' is not subsettable\n",
        "> ",
        "library(plyr)",
        "> ",
        "library(readr)",
        "> ",
        "library(data.table)",
        "> ",
        "library(dplyr)",
        "> ",
        "library(lubridate)",
        "> ",
        "library(maps)",
        "> ",
        "library(fpc)",
        "> ",
        "library(factoextra)",
        "> ",
        "library(leaflet)",
        "> ",
        "library(plotly)",
        "> ",
        "#AIS文件整合",
        "> ",
        "# dir = \"~/AIS/2020_year_container\" ",
        "> ",
        "# file_list = list.files(path = dir, pattern = \"*.csv$\",recursive = TRUE,full.names = TRUE)  ",
        "> ",
        "# store_csv = paste(dir,\"new.csv\")         ",
        "> ",
        "# for(i in 1:length(file_list)) ",
        "> ",
        "# {",
        "> ",
        "# df = fread(file = file_list[i],encoding = 'UTF-8', nThread = 12,verbose = T)",
        "> ",
        "# fwrite(df,file = store_csv,append = TRUE)              ",
        "> ",
        "# }",
        "> ",
        "",
        "> ",
        "# dir = \"~/AIS/2020_year_container\" ",
        "> ",
        "# file_list = list.files(path = dir, pattern = \"*.csv$\",recursive = TRUE,full.names = TRUE)  ",
        "> ",
        "# for(i in 1:length(file_list)) ",
        "> ",
        "# {",
        "> ",
        "# df = fread(file = file_list[i],encoding = 'UTF-8', nThread = 12,verbose = T)",
        "> ",
        "# fwrite(df,file = store_csv,append = TRUE)              ",
        "> ",
        "# }",
        "> ",
        "",
        "> ",
        "AIS_test <- fread(\"~/AIS/2019_year_container/ 518955000 .csv\",showProgress = T, nThread = 12)%>%arrange(time)",
        "> ",
        "AIS_test$time <- as.POSIXct(AIS_test$time, origin=\"1970-01-01\")",
        "> ",
        "AIS_test$lat <- AIS_test$lat/1000000",
        "> ",
        "AIS_test$lon <- AIS_test$lon/1000000",
        "> ",
        "",
        "> ",
        "",
        "> ",
        "test <- as.matrix(subset(AIS_test,select = c('lon','lat')))",
        "> ",
        "r = isolation.forest(test,ntrees = 10, nthreads = 10)",
        "Warning message:\n",
        "In isolation.forest(test, ntrees = 10, nthreads = 10) :",
        "\n ",
        " Attempting to use more than 1 thread, but package was compiled without OpenMP support. See https://mac.r-project.org/openmp/\n",
        "> ",
        "pred <- predict(r, test)",
        "> ",
        "cat(\"Point with highest outlier score: \",",
        "+ ",
        "    data[which.max(pred), ], \"\\n\")",
        "Error in data[which.max(pred), ] : \n  object of type 'closure' is not subsettable\n",
        "> ",
        "test[1,]",
        "     lon      lat \n24.81232 34.92747 \n",
        "> ",
        "library(plyr)",
        "> ",
        "library(readr)",
        "> ",
        "library(data.table)",
        "> ",
        "library(dplyr)",
        "> ",
        "library(lubridate)",
        "> ",
        "library(maps)",
        "> ",
        "library(fpc)",
        "> ",
        "library(factoextra)",
        "> ",
        "library(leaflet)",
        "> ",
        "library(plotly)",
        "> ",
        "#AIS文件整合",
        "> ",
        "# dir = \"~/AIS/2020_year_container\" ",
        "> ",
        "# file_list = list.files(path = dir, pattern = \"*.csv$\",recursive = TRUE,full.names = TRUE)  ",
        "> ",
        "# store_csv = paste(dir,\"new.csv\")         ",
        "> ",
        "# for(i in 1:length(file_list)) ",
        "> ",
        "# {",
        "> ",
        "# df = fread(file = file_list[i],encoding = 'UTF-8', nThread = 12,verbose = T)",
        "> ",
        "# fwrite(df,file = store_csv,append = TRUE)              ",
        "> ",
        "# }",
        "> ",
        "",
        "> ",
        "# dir = \"~/AIS/2020_year_container\" ",
        "> ",
        "# file_list = list.files(path = dir, pattern = \"*.csv$\",recursive = TRUE,full.names = TRUE)  ",
        "> ",
        "# for(i in 1:length(file_list)) ",
        "> ",
        "# {",
        "> ",
        "# df = fread(file = file_list[i],encoding = 'UTF-8', nThread = 12,verbose = T)",
        "> ",
        "# fwrite(df,file = store_csv,append = TRUE)              ",
        "> ",
        "# }",
        "> ",
        "",
        "> ",
        "AIS_test <- fread(\"~/AIS/2019_year_container/ 518955000 .csv\",showProgress = T, nThread = 12)%>%arrange(time)",
        "> ",
        "AIS_test$time <- as.POSIXct(AIS_test$time, origin=\"1970-01-01\")",
        "> ",
        "AIS_test$lat <- AIS_test$lat/1000000",
        "> ",
        "AIS_test$lon <- AIS_test$lon/1000000",
        "> ",
        "",
        "> ",
        "test <- subset(AIS_test,select = c('lon','lat'))",
        "> ",
        "r = isolation.forest(test,ntrees = 10, nthreads = 1)",
        "> ",
        "pred <- predict(r, test)",
        "> ",
        "cat(\"Point with highest outlier score: \",",
        "+ ",
        "    test[which.max(pred), ], \"\\n\")",
        "Point with highest outlier score:  ",
        "Error in cat(\"Point with highest outlier score: \", test[which.max(pred),  : \n  argument 2 (type 'list') cannot be handled by 'cat'\n",
        "> ",
        ")",
        "Error: unexpected ')' in \")\"\n",
        "> ",
        "",
        "> ",
        "",
        "> ",
        "",
        "> ",
        "test <- as.matrix(subset(AIS_test,select = c('lon','lat')))",
        "> ",
        "r = isolation.forest(test,ntrees = 10, nthreads = 1)",
        "> ",
        "pred <- predict(r, test)",
        "> ",
        "cat(\"Point with highest outlier score: \",",
        "+ ",
        "    test[which.max(pred), ], \"\\n\")",
        "Point with highest outlier score:  35.7845 32.7146 \n",
        "> ",
        "  db <- fpc::dbscan(test, eps = .01, MinPts = 8 )",
        "> ",
        "fviz_cluster(db, data = test, stand = FALSE,",
        "+ ",
        "             ellipse = T, show.clust.cent = T,pointsize =1,outlier.color = \"gray\",outlier.pointsize = 0.1,",
        "+ ",
        "               geom = \"point\",shape = 1,palette = \"jco\", ggtheme= theme_classic())",
        "Warning messages:\n",
        "1: This manual palette can handle a maximum of 10 values. You have supplied 118. \n",
        "2: This manual palette can handle a maximum of 10 values. You have supplied 118. \n",
        "3: Removed 4757 rows containing missing values (geom_point). \n",
        "4: Removed 108 rows containing missing values (geom_point). \n",
        "> ",
        "m <- leaflet()%>%",
        "+ ",
        "  addTiles()%>%",
        "+ ",
        "  addPolylines(data=test,~lon,~lat,color=\"red\",opacity = 0.7,weight = 1)%>%",
        "+ ",
        "  addProviderTiles(\"Stadia.Outdoors\")",
        "Error in UseMethod(\"metaData\") : \n  no applicable method for 'metaData' applied to an object of class \"c('matrix', 'array', 'double', 'numeric')\"\n",
        "> ",
        "ggplotly(m)",
        "Error in ggplotly(m) : object 'm' not found\n",
        "> ",
        "library(plyr)",
        "> ",
        "library(readr)",
        "> ",
        "library(data.table)",
        "> ",
        "library(dplyr)",
        "> ",
        "library(lubridate)",
        "> ",
        "library(maps)",
        "> ",
        "library(fpc)",
        "> ",
        "library(factoextra)",
        "> ",
        "library(leaflet)",
        "> ",
        "library(plotly)",
        "> ",
        "",
        "> ",
        "AIS_test <- fread(\"~/AIS/2019_year_container/ 518955000 .csv\",showProgress = T, nThread = 12)%>%arrange(time)",
        "> ",
        "AIS_test$time <- as.POSIXct(AIS_test$time, origin=\"1970-01-01\")",
        "> ",
        "AIS_test$lat <- AIS_test$lat/1000000",
        "> ",
        "AIS_test$lon <- AIS_test$lon/1000000",
        "> ",
        "test <- as.matrix(subset(AIS_test,select = c('lon','lat')))",
        "> ",
        "r = isolation.forest(test,ntrees = 10, nthreads = 1)",
        "> ",
        "temp = subset(AIS_test,select = c('lon','lat'))",
        "> ",
        "a <- leaflet()%>%\\",
        "+ ",
        "  addPolylines(data=temp,~lon,~lat,color=\"red\",opacity = 0.7,weight = 1)%>%",
        "Error: unexpected symbol in:\n\"a <- leaflet()%>%\\\n  addPolylines\"\n",
        "> ",
        "  addProviderTiles(\"Stadia.Outdoors\")",
        "Error: $ operator is invalid for atomic vectors\n",
        "> ",
        "a <- leaflet()%>%",
        "+ ",
        "  addPoints(data=temp,~lon,~lat,color=\"red\",opacity = 0.7,weight = 1)%>%",
        "+ ",
        "  addProviderTiles(\"Stadia.Outdoors\")",
        "Error in addPoints(., data = temp, ~lon, ~lat, color = \"red\", opacity = 0.7,  : \n  could not find function \"addPoints\"\n",
        "> ",
        "a <- leaflet()%>%",
        "+ ",
        "  geom_point(data=temp,~lon,~lat,color=\"red\",opacity = 0.7,weight = 1)%>%",
        "+ ",
        "  addProviderTiles(\"Stadia.Outdoors\")",
        "\u001B[1m\u001B[33mError\u001B[39m in \u001B[38;5;229m`validate_mapping()`\u001B[39m:\u001B[22m\n\u001B[33m!\u001B[39m `mapping` must be created by `aes()`\n\u001B[90mRun `rlang::last_error()` to see where the error occurred.\u001B[39m\n",
        "> ",
        "View(temp)",
        "> ",
        "a <- leaflet()%>%",
        "+ ",
        "  geom_point(data=temp,aes(x=lon, y=lat))%>%",
        "+ ",
        "  addProviderTiles(\"Stadia.Outdoors\")",
        "\u001B[1m\u001B[33mError\u001B[39m in \u001B[38;5;229m`validate_mapping()`\u001B[39m:\u001B[22m\n\u001B[33m!\u001B[39m `mapping` must be created by `aes()`\n\u001B[90mRun `rlang::last_error()` to see where the error occurred.\u001B[39m\n",
        "> ",
        "ggplot() +",
        "+ ",
        "  geom_polygon(data = world, aes(x=lon, y = lat, group = group), fill=\"grey\", alpha=0.3) +",
        "+ ",
        "  geom_point( data=data, aes(x=lon, y=lat)) +",
        "+ ",
        "  theme_void() + ylim(50,59) + coord_map() ",
        "Error in fortify(data) : object 'world' not found\n",
        "> ",
        "ggplot() +",
        "+ ",
        "  geom_point( data=data, aes(x=lon, y=lat)) +",
        "+ ",
        "  theme_void() + ylim(50,59) + coord_map() ",
        "\u001B[1m\u001B[33mError\u001B[39m in \u001B[38;5;229m`f()`\u001B[39m:\u001B[22m\n\u001B[33m!\u001B[39m Data function must return a data.frame\n\u001B[90mRun `rlang::last_error()` to see where the error occurred.\u001B[39m\n",
        "Warning message:\n",
        "In f(...) :",
        " data set ‘plot_data’ not found\n",
        "> ",
        "ggplot() +",
        "+ ",
        "  geom_point( data=temp, aes(x=lon, y=lat)) +",
        "+ ",
        "  theme_void() + ylim(50,59) + coord_map() ",
        "\u001B[34mℹ\u001B[39m The package `mapproj` is required for `coord_map()`\n\u001B[31mx\u001B[39m Would you like to install it?\n\n1: Yes\n2: No\n\n",
        "Selection: ",
        "1",
        "trying URL 'https://cran.rstudio.com/bin/macosx/big-sur-arm64/contrib/4.1/mapproj_1.2.8.tgz'\n",
        "Content type 'application/x-gzip'",
        " length 84123 bytes (82 KB)\n",
        "=",
        "=",
        "=",
        "=",
        "=",
        "=",
        "=",
        "=",
        "=",
        "=",
        "=",
        "=",
        "=",
        "=",
        "=",
        "=",
        "=",
        "=",
        "=",
        "=",
        "=",
        "=",
        "=",
        "=",
        "=",
        "=",
        "=",
        "=",
        "=",
        "=",
        "=",
        "=",
        "=",
        "=",
        "=",
        "=",
        "=",
        "=",
        "=",
        "=",
        "=",
        "=",
        "=",
        "=",
        "=",
        "=",
        "=",
        "=",
        "=",
        "=",
        "\n",
        "downloaded 82 KB\n\n",
        "\nThe downloaded binary packages are in\n\t/var/folders/6t/gvgqlr354n9dxrgwmbsc1gnr0000gn/T//Rtmpg4h1ep/downloaded_packages\n",
        "Warning message:\n",
        "Removed 14391 rows containing missing values (geom_point). \n",
        "> ",
        "ggplot() +",
        "+ ",
        "  geom_point( data=temp, aes(x=lon, y=lat)) +",
        "+ ",
        "  theme_void() + ylim(50,59) + coord_map() ",
        "Warning message:\n",
        "Removed 14391 rows containing missing values (geom_point). \n",
        "> ",
        "ggplot() +",
        "+ ",
        "  geom_point( data=temp, aes(x=lon, y=lat)) ",
        "> ",
        "temp = subset(AIS_test,select = c('lon','lat'))",
        "> ",
        "test <- as.matrix(temp)",
        "> ",
        "r = isolation.forest(test,ntrees = 1, nthreads = 1)",
        "> ",
        "pred <- predict(r, test)",
        "> ",
        "cat(\"Point with highest outlier score: \",",
        "+ ",
        "    test[which.max(pred), ], \"\\n\")",
        "Point with highest outlier score:  35.7845 32.7146 \n",
        "> ",
        "temp = subset(AIS_test,select = c('lon','lat'))",
        "> ",
        "test <- as.matrix(temp)",
        "> ",
        "r = isolation.forest(test,ntrees = 1000, nthreads = 1)",
        "> ",
        "pred <- predict(r, test)",
        "> ",
        "cat(\"Point with highest outlier score: \",",
        "+ ",
        "    test[which.max(pred), ], \"\\n\")",
        "Point with highest outlier score:  31.4399 41.60047 \n",
        "> ",
        "r = isolation.forest(test,ntrees = 1000, nthreads = 12)",
        "Error: procedure was interrupted\n",
        "Error: procedure was interrupted\n",
        "\n",
        "> ",
        "library(plyr)",
        "> ",
        "library(readr)",
        "> ",
        "library(data.table)",
        "> ",
        "library(dplyr)",
        "> ",
        "library(lubridate)",
        "> ",
        "library(maps)",
        "> ",
        "library(fpc)",
        "> ",
        "library(factoextra)",
        "> ",
        "library(leaflet)",
        "> ",
        "library(plotly)",
        "> ",
        "",
        "> ",
        "AIS_test <- fread(\"~/AIS/2019_year_container/ 518955000 .csv\",showProgress = T, nThread = 12)%>%arrange(time)",
        "> ",
        "AIS_test$time <- as.POSIXct(AIS_test$time, origin=\"1970-01-01\")",
        "> ",
        "AIS_test$lat <- AIS_test$lat/1000000",
        "> ",
        "AIS_test$lon <- AIS_test$lon/1000000",
        "> ",
        "",
        "> ",
        "temp = subset(AIS_test,select = c('lon','lat'))",
        "> ",
        "test <- as.matrix(temp)",
        "> ",
        "r = isolation.forest(test,ntrees = 100, nthreads = 12)",
        "Warning message:\n",
        "In isolation.forest(test, ntrees = 100, nthreads = 12) :",
        "\n ",
        " Attempting to use more than 1 thread, but package was compiled without OpenMP support. See https://mac.r-project.org/openmp/\n",
        "> ",
        "install.packages('fst')",
        "also installing the dependency ‘fstcore’\n\n",
        "trying URL 'https://cran.rstudio.com/bin/macosx/big-sur-arm64/contrib/4.1/fstcore_0.9.12.tgz'\n",
        "Content type 'application/x-gzip'",
        " length 1143642 bytes (1.1 MB)\n",
        "=",
        "=",
        "=",
        "=",
        "=",
        "=",
        "=",
        "=",
        "=",
        "=",
        "=",
        "=",
        "=",
        "=",
        "=",
        "=",
        "=",
        "=",
        "=",
        "=",
        "=",
        "=",
        "=",
        "=",
        "=",
        "=",
        "=",
        "=",
        "=",
        "=",
        "=",
        "=",
        "=",
        "=",
        "=",
        "=",
        "=",
        "=",
        "=",
        "=",
        "=",
        "=",
        "=",
        "=",
        "=",
        "=",
        "=",
        "=",
        "=",
        "=",
        "\n",
        "downloaded 1.1 MB\n\n",
        "trying URL 'https://cran.rstudio.com/bin/macosx/big-sur-arm64/contrib/4.1/fst_0.9.8.tgz'\n",
        "Content type 'application/x-gzip'",
        " length 435109 bytes (424 KB)\n",
        "=",
        "=",
        "=",
        "=",
        "=",
        "=",
        "=",
        "=",
        "=",
        "=",
        "=",
        "=",
        "=",
        "=",
        "=",
        "=",
        "=",
        "=",
        "=",
        "=",
        "=",
        "=",
        "=",
        "=",
        "=",
        "=",
        "=",
        "=",
        "=",
        "=",
        "=",
        "=",
        "=",
        "=",
        "=",
        "=",
        "=",
        "=",
        "=",
        "=",
        "=",
        "=",
        "=",
        "=",
        "=",
        "=",
        "=",
        "=",
        "=",
        "=",
        "\n",
        "downloaded 424 KB\n\n",
        "\nThe downloaded binary packages are in\n\t/var/folders/6t/gvgqlr354n9dxrgwmbsc1gnr0000gn/T//Rtmpg4h1ep/downloaded_packages\n",
        "> ",
        "library('fst')",
        "fst package v0.9.8\n",
        "> ",
        "install.packages(\"fstcore\")",
        "Error in install.packages : Updating loaded packages\n",
        "> ",
        "install.packages(\"fst\")",
        "Error in install.packages : Updating loaded packages\n\nRestarting R session...\n\n"
    ]
}