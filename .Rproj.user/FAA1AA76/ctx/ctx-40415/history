library(leaflet)
library(plotly)
#AIS文件整合
# dir = "~/AIS/2020_year_container"
# file_list = list.files(path = dir, pattern = "*.csv$",recursive = TRUE,full.names = TRUE)
# store_csv = paste(dir,"new.csv")
# for(i in 1:length(file_list))
# {
# df = fread(file = file_list[i],encoding = 'UTF-8', nThread = 12,verbose = T)
# fwrite(df,file = store_csv,append = TRUE)
# }
# dir = "~/AIS/2020_year_container"
# file_list = list.files(path = dir, pattern = "*.csv$",recursive = TRUE,full.names = TRUE)
# for(i in 1:length(file_list))
# {
# df = fread(file = file_list[i],encoding = 'UTF-8', nThread = 12,verbose = T)
# fwrite(df,file = store_csv,append = TRUE)
# }
AIS_test <- fread("~/AIS/2019_year_container/ 518955000 .csv",showProgress = T, nThread = 12)%>%arrange(time)
AIS_test$time <- as.POSIXct(AIS_test$time, origin="1970-01-01")
AIS_test$lat <- AIS_test$lat/1000000
AIS_test$lon <- AIS_test$lon/1000000
test <- subset(AIS_test,select = c('lon','lat'))
db <- fpc::dbscan(test, eps = .01, MinPts = 8 )
fviz_cluster(db, data = test, stand = FALSE,
ellipse = T, show.clust.cent = T,pointsize =1,outlier.color = "gray",outlier.pointsize = 0.1,
geom = "point",shape = 1,palette = "jco", ggtheme= theme_classic())
m <- leaflet()%>%
addTiles()%>%
addPolylines(data=test,~lon,~lat,color="red",opacity = 0.7,weight = 1)%>%
addProviderTiles("Stadia.Outdoors")
ggplotly(m)
install.packages('library(solitude)')
install.packages('solitude')
gc()
#import packages
library(ggplot2)
library(solitude)
#create and plot sample data
#create data
n = 1000
Var1 = c(rnorm(n, 0, 0.5), rnorm(n*0.1, -2, 1))
Var2 = c(rnorm(n, 0, 0.5), rnorm(n*0.1,  2, 1))
outliers = c(rep(0, n), rep(1, (0.1*n))) + 3
data = data.frame(Var1, Var2)
View(data)
#plot data
ggplot(data, aes(x = Var1, y = Var2)) +
geom_point(shape = 1, alpha = 0.5) +
labs(x = "x", y = "y") +
labs(alpha = "", colour="Legend")
#create isolation forest using isolationForest function from solitude package with default parameters
iforest <- isolationForest(data)
library(solitude)
#create isolation forest using isolationForest function from solitude package with default parameters
iforest <- isolationForest(data)
#import packages
library(ggplot2)
library(solitude)
#create data
n = 1000
Var1 = c(rnorm(n, 0, 0.5), rnorm(n*0.1, -2, 1))
Var2 = c(rnorm(n, 0, 0.5), rnorm(n*0.1,  2, 1))
outliers = c(rep(0, n), rep(1, (0.1*n))) + 3
data = data.frame(Var1, Var2)
#plot data
ggplot(data, aes(x = Var1, y = Var2)) +
geom_point(shape = 1, alpha = 0.5) +
labs(x = "x", y = "y") +
labs(alpha = "", colour="Legend")
#create isolation forest using isolationForest function from solitude package with default parameters
iforest <- isolationForest(data)
#create isolation forest using isolationForest function from solitude package with default parameters
iforest <- isolationForest(data)
#create isolation forest using isolationForest function from solitude package with default parameters
iforest <- isolation.Forest(data)
#create isolation forest using isolationForest function from solitude package with default parameters
iforest <- isolation.forest(data)
#create isolation forest using isolationForest function from solitude package with default parameters
iforest <- isolationforest(data)
library(solitude)
if(!require('isotree')) {
install.packages('isotree')
library('isotree')
}
if(!require('isotree')) {
install.packages('isotree')
library('isotree')
}
### Example 1: detect an obvious outlier
### (Random data from a standard normal distribution)
library(isotree)
library('isotree')
### Example 1: detect an obvious outlier
### (Random data from a standard normal distribution)
library(isotree)
set.seed(1)
m <- 100
n <- 2
X <- matrix(rnorm(m * n), nrow = m)
### Will now add obvious outlier point (3, 3) to the data
X <- rbind(X, c(3, 3))
View(X)
### Fit a small isolation forest model
iso <- isolation.forest(X, ntrees = 10, nthreads = 1)
View(iso)
### Check which row has the highest outlier score
pred <- predict(iso, X)
cat("Point with highest outlier score: ",
X[which.max(pred), ], "\n")
library(plyr)
library(readr)
library(data.table)
library(dplyr)
library(lubridate)
library(maps)
library(fpc)
library(factoextra)
library(leaflet)
library(plotly)
#AIS文件整合
# dir = "~/AIS/2020_year_container"
# file_list = list.files(path = dir, pattern = "*.csv$",recursive = TRUE,full.names = TRUE)
# store_csv = paste(dir,"new.csv")
# for(i in 1:length(file_list))
# {
# df = fread(file = file_list[i],encoding = 'UTF-8', nThread = 12,verbose = T)
# fwrite(df,file = store_csv,append = TRUE)
# }
# dir = "~/AIS/2020_year_container"
# file_list = list.files(path = dir, pattern = "*.csv$",recursive = TRUE,full.names = TRUE)
# for(i in 1:length(file_list))
# {
# df = fread(file = file_list[i],encoding = 'UTF-8', nThread = 12,verbose = T)
# fwrite(df,file = store_csv,append = TRUE)
# }
AIS_test <- fread("~/AIS/2019_year_container/ 518955000 .csv",showProgress = T, nThread = 12)%>%arrange(time)
AIS_test$time <- as.POSIXct(AIS_test$time, origin="1970-01-01")
AIS_test$lat <- AIS_test$lat/1000000
AIS_test$lon <- AIS_test$lon/1000000
test <- subset(AIS_test,select = c('lon','lat'))
View(test)
r = isolation.forest(test,ntrees = 10, nthreads = 1)
pred <- predict(r, test)
cat("Point with highest outlier score: ",
X[which.max(pred), ], "\n")
cat("Point with highest outlier score: ",
data[which.max(pred), ], "\n")
pred <- predict(r, test)
cat("Point with highest outlier score: ",
data[which.max(pred), ], "\n")
View(test)
View(r)
View(r)
cat("Point with highest outlier score: ",
data[which.max(pred), ], "\n")
### Example 2: plotting outlier regions
### This example shows predicted outlier score in a small
### grid, with a model fit to a bi-modal distribution. As can
### be seen, the extended model is able to detect high
### outlierness outside of both regions, without having false
### ghost regions of low-outlierness where there isn't any data
library(isotree)
oldpar <- par(mfrow = c(2, 2), mar = c(2.5,2.2,2,2.5))
View(oldpar)
### Randomly-generated data from different distributions
set.seed(1)
group1 <- data.frame(x = rnorm(1000, -1, .4),
y = rnorm(1000, -1, .2))
group2 <- data.frame(x = rnorm(1000, +1, .2),
y = rnorm(1000, +1, .4))
X = rbind(group1, group2)
### Add an obvious outlier which is within the 1d ranges
### (As an interesting test, remove the outlier and see what happens,
###  or check how its score changes when using sub-sampling or
###  changing the scoring metric for 'ndim=1')
X = rbind(X, c(-1, 1))
View(X)
### Produce heatmaps
pts = seq(-3, 3, .1)
space_d <- expand.grid(x = pts, y = pts)
plot.space <- function(Z, ttl) {
image(pts, pts, matrix(Z, nrow = length(pts)),
col = rev(heat.colors(50)),
main = ttl, cex.main = 1.4,
xlim = c(-3, 3), ylim = c(-3, 3),
xlab = "", ylab = "")
par(new = TRUE)
plot(X, type = "p", xlim = c(-3, 3), ylim = c(-3, 3),
col = "#0000801A",
axes = FALSE, main = "",
xlab = "", ylab = "")
}
### Single-variable model
iso_simple = isolation.forest(
X, ndim=1,
ntrees=100,
nthreads=1,
penalize_range=FALSE,
prob_pick_pooled_gain=0,
prob_pick_avg_gain=0)
Z1 <- predict(iso_simple, space_d)
plot.space(Z1, "Isolation Forest")
### Extended model
iso_ext = isolation.forest(
X, ndim=2,
ntrees=100,
nthreads=1,
penalize_range=FALSE,
prob_pick_pooled_gain=0,
prob_pick_avg_gain=0)
Z2 <- predict(iso_ext, space_d)
plot.space(Z2, "Extended Isolation Forest")
### SCiForest
iso_sci = isolation.forest(
X, ndim=2, ntry=1,
coefs="normal",
ntrees=100,
nthreads=1,
penalize_range=TRUE,
prob_pick_pooled_gain=0,
prob_pick_avg_gain=1)
Z3 <- predict(iso_sci, space_d)
plot.space(Z3, "SCiForest")
### Fair-cut forest
iso_fcf = isolation.forest(
X, ndim=2,
ntrees=100,
nthreads=1,
penalize_range=FALSE,
prob_pick_pooled_gain=1,
prob_pick_avg_gain=0)
Z4 <- predict(iso_fcf, space_d)
plot.space(Z4, "Fair-Cut Forest")
par(oldpar)
library(plyr)
library(readr)
library(data.table)
library(dplyr)
library(lubridate)
library(maps)
library(fpc)
library(factoextra)
library(leaflet)
library(plotly)
#AIS文件整合
# dir = "~/AIS/2020_year_container"
# file_list = list.files(path = dir, pattern = "*.csv$",recursive = TRUE,full.names = TRUE)
# store_csv = paste(dir,"new.csv")
# for(i in 1:length(file_list))
# {
# df = fread(file = file_list[i],encoding = 'UTF-8', nThread = 12,verbose = T)
# fwrite(df,file = store_csv,append = TRUE)
# }
# dir = "~/AIS/2020_year_container"
# file_list = list.files(path = dir, pattern = "*.csv$",recursive = TRUE,full.names = TRUE)
# for(i in 1:length(file_list))
# {
# df = fread(file = file_list[i],encoding = 'UTF-8', nThread = 12,verbose = T)
# fwrite(df,file = store_csv,append = TRUE)
# }
AIS_test <- fread("~/AIS/2019_year_container/ 518955000 .csv",showProgress = T, nThread = 12)%>%arrange(time)
AIS_test$time <- as.POSIXct(AIS_test$time, origin="1970-01-01")
AIS_test$lat <- AIS_test$lat/1000000
AIS_test$lon <- AIS_test$lon/1000000
test <- subset(AIS_test,select = c('lon','lat'))
View(test)
is.na(test)
r = isolation.forest(test,ntrees = 10, nthreads = 10)
pred <- predict(r, test)
cat("Point with highest outlier score: ",
data[which.max(pred), ], "\n")
data[which.max(pred), ]
which.max(pred)
data[which.max(pred)]
library('isotree')
### Example 1: detect an obvious outlier
### (Random data from a standard normal distribution)
library(isotree)
set.seed(1)
m <- 100
n <- 2
X <- matrix(rnorm(m * n), nrow = m)
### Will now add obvious outlier point (3, 3) to the data
X <- rbind(X, c(3, 3))
### Fit a small isolation forest model
iso <- isolation.forest(X, ntrees = 10, nthreads = 1)
### Will now add obvious outlier point (3, 3) to the data
X <- rbind(X, c(3, 3))
data[11867,]
data(11867 ,)
data[2,2]
data[1:]
data$100
library(plyr)
library(readr)
library(data.table)
library(dplyr)
library(lubridate)
library(maps)
library(fpc)
library(factoextra)
library(leaflet)
library(plotly)
#AIS文件整合
# dir = "~/AIS/2020_year_container"
# file_list = list.files(path = dir, pattern = "*.csv$",recursive = TRUE,full.names = TRUE)
# store_csv = paste(dir,"new.csv")
# for(i in 1:length(file_list))
# {
# df = fread(file = file_list[i],encoding = 'UTF-8', nThread = 12,verbose = T)
# fwrite(df,file = store_csv,append = TRUE)
# }
# dir = "~/AIS/2020_year_container"
# file_list = list.files(path = dir, pattern = "*.csv$",recursive = TRUE,full.names = TRUE)
# for(i in 1:length(file_list))
# {
# df = fread(file = file_list[i],encoding = 'UTF-8', nThread = 12,verbose = T)
# fwrite(df,file = store_csv,append = TRUE)
# }
AIS_test <- fread("~/AIS/2019_year_container/ 518955000 .csv",showProgress = T, nThread = 12)%>%arrange(time)
AIS_test$time <- as.POSIXct(AIS_test$time, origin="1970-01-01")
AIS_test$lat <- AIS_test$lat/1000000
AIS_test$lon <- AIS_test$lon/1000000
test <- subset(AIS_test,select = c('lon','lat'))
r = isolation.forest(test,ntrees = 10, nthreads = 10)
test <- data.table(subset(AIS_test,select = c('lon','lat')))
r = isolation.forest(test,ntrees = 10, nthreads = 10)
pred <- predict(r, test)
cat("Point with highest outlier score: ",
data[which.max(pred), ], "\n")
m <- 100
n <- 2
X <- matrix(rnorm(m * n), nrow = m)
### Will now add obvious outlier point (3, 3) to the data
X <- rbind(X, c(3, 3))
View(X)
mode(X)
type(X)
class(X)
test <- matrix(subset(AIS_test,select = c('lon','lat')))
View(test)
test <- as.matrix(subset(AIS_test,select = c('lon','lat')))
r = isolation.forest(test,ntrees = 10, nthreads = 10)
pred <- predict(r, test)
cat("Point with highest outlier score: ",
data[which.max(pred), ], "\n")
library(plyr)
library(readr)
library(data.table)
library(dplyr)
library(lubridate)
library(maps)
library(fpc)
library(factoextra)
library(leaflet)
library(plotly)
#AIS文件整合
# dir = "~/AIS/2020_year_container"
# file_list = list.files(path = dir, pattern = "*.csv$",recursive = TRUE,full.names = TRUE)
# store_csv = paste(dir,"new.csv")
# for(i in 1:length(file_list))
# {
# df = fread(file = file_list[i],encoding = 'UTF-8', nThread = 12,verbose = T)
# fwrite(df,file = store_csv,append = TRUE)
# }
# dir = "~/AIS/2020_year_container"
# file_list = list.files(path = dir, pattern = "*.csv$",recursive = TRUE,full.names = TRUE)
# for(i in 1:length(file_list))
# {
# df = fread(file = file_list[i],encoding = 'UTF-8', nThread = 12,verbose = T)
# fwrite(df,file = store_csv,append = TRUE)
# }
AIS_test <- fread("~/AIS/2019_year_container/ 518955000 .csv",showProgress = T, nThread = 12)%>%arrange(time)
AIS_test$time <- as.POSIXct(AIS_test$time, origin="1970-01-01")
AIS_test$lat <- AIS_test$lat/1000000
AIS_test$lon <- AIS_test$lon/1000000
test <- as.matrix(subset(AIS_test,select = c('lon','lat')))
r = isolation.forest(test,ntrees = 10, nthreads = 10)
pred <- predict(r, test)
cat("Point with highest outlier score: ",
data[which.max(pred), ], "\n")
test[1,]
library(plyr)
library(readr)
library(data.table)
library(dplyr)
library(lubridate)
library(maps)
library(fpc)
library(factoextra)
library(leaflet)
library(plotly)
#AIS文件整合
# dir = "~/AIS/2020_year_container"
# file_list = list.files(path = dir, pattern = "*.csv$",recursive = TRUE,full.names = TRUE)
# store_csv = paste(dir,"new.csv")
# for(i in 1:length(file_list))
# {
# df = fread(file = file_list[i],encoding = 'UTF-8', nThread = 12,verbose = T)
# fwrite(df,file = store_csv,append = TRUE)
# }
# dir = "~/AIS/2020_year_container"
# file_list = list.files(path = dir, pattern = "*.csv$",recursive = TRUE,full.names = TRUE)
# for(i in 1:length(file_list))
# {
# df = fread(file = file_list[i],encoding = 'UTF-8', nThread = 12,verbose = T)
# fwrite(df,file = store_csv,append = TRUE)
# }
AIS_test <- fread("~/AIS/2019_year_container/ 518955000 .csv",showProgress = T, nThread = 12)%>%arrange(time)
AIS_test$time <- as.POSIXct(AIS_test$time, origin="1970-01-01")
AIS_test$lat <- AIS_test$lat/1000000
AIS_test$lon <- AIS_test$lon/1000000
test <- subset(AIS_test,select = c('lon','lat'))
r = isolation.forest(test,ntrees = 10, nthreads = 1)
pred <- predict(r, test)
cat("Point with highest outlier score: ",
test[which.max(pred), ], "\n")
)
test <- as.matrix(subset(AIS_test,select = c('lon','lat')))
r = isolation.forest(test,ntrees = 10, nthreads = 1)
pred <- predict(r, test)
cat("Point with highest outlier score: ",
test[which.max(pred), ], "\n")
db <- fpc::dbscan(test, eps = .01, MinPts = 8 )
fviz_cluster(db, data = test, stand = FALSE,
ellipse = T, show.clust.cent = T,pointsize =1,outlier.color = "gray",outlier.pointsize = 0.1,
geom = "point",shape = 1,palette = "jco", ggtheme= theme_classic())
m <- leaflet()%>%
addTiles()%>%
addPolylines(data=test,~lon,~lat,color="red",opacity = 0.7,weight = 1)%>%
addProviderTiles("Stadia.Outdoors")
ggplotly(m)
library(plyr)
library(readr)
library(data.table)
library(dplyr)
library(lubridate)
library(maps)
library(fpc)
library(factoextra)
library(leaflet)
library(plotly)
AIS_test <- fread("~/AIS/2019_year_container/ 518955000 .csv",showProgress = T, nThread = 12)%>%arrange(time)
AIS_test$time <- as.POSIXct(AIS_test$time, origin="1970-01-01")
AIS_test$lat <- AIS_test$lat/1000000
AIS_test$lon <- AIS_test$lon/1000000
test <- as.matrix(subset(AIS_test,select = c('lon','lat')))
r = isolation.forest(test,ntrees = 10, nthreads = 1)
temp = subset(AIS_test,select = c('lon','lat'))
a <- leaflet()%>%\
addPolylines(data=temp,~lon,~lat,color="red",opacity = 0.7,weight = 1)%>%
addProviderTiles("Stadia.Outdoors")
a <- leaflet()%>%
addPoints(data=temp,~lon,~lat,color="red",opacity = 0.7,weight = 1)%>%
addProviderTiles("Stadia.Outdoors")
a <- leaflet()%>%
geom_point(data=temp,~lon,~lat,color="red",opacity = 0.7,weight = 1)%>%
addProviderTiles("Stadia.Outdoors")
View(temp)
a <- leaflet()%>%
geom_point(data=temp,aes(x=lon, y=lat))%>%
addProviderTiles("Stadia.Outdoors")
ggplot() +
geom_polygon(data = world, aes(x=lon, y = lat, group = group), fill="grey", alpha=0.3) +
geom_point( data=data, aes(x=lon, y=lat)) +
theme_void() + ylim(50,59) + coord_map()
ggplot() +
geom_point( data=data, aes(x=lon, y=lat)) +
theme_void() + ylim(50,59) + coord_map()
ggplot() +
geom_point( data=temp, aes(x=lon, y=lat)) +
theme_void() + ylim(50,59) + coord_map()
ggplot() +
geom_point( data=temp, aes(x=lon, y=lat)) +
theme_void() + ylim(50,59) + coord_map()
ggplot() +
geom_point( data=temp, aes(x=lon, y=lat))
temp = subset(AIS_test,select = c('lon','lat'))
test <- as.matrix(temp)
r = isolation.forest(test,ntrees = 1, nthreads = 1)
pred <- predict(r, test)
cat("Point with highest outlier score: ",
test[which.max(pred), ], "\n")
temp = subset(AIS_test,select = c('lon','lat'))
test <- as.matrix(temp)
r = isolation.forest(test,ntrees = 1000, nthreads = 1)
pred <- predict(r, test)
cat("Point with highest outlier score: ",
test[which.max(pred), ], "\n")
r = isolation.forest(test,ntrees = 1000, nthreads = 12)
library(plyr)
library(readr)
library(data.table)
library(dplyr)
library(lubridate)
library(maps)
library(fpc)
library(factoextra)
library(leaflet)
library(plotly)
AIS_test <- fread("~/AIS/2019_year_container/ 518955000 .csv",showProgress = T, nThread = 12)%>%arrange(time)
AIS_test$time <- as.POSIXct(AIS_test$time, origin="1970-01-01")
AIS_test$lat <- AIS_test$lat/1000000
AIS_test$lon <- AIS_test$lon/1000000
temp = subset(AIS_test,select = c('lon','lat'))
test <- as.matrix(temp)
r = isolation.forest(test,ntrees = 100, nthreads = 12)
install.packages('fst')
library('fst')
install.packages("fstcore")
install.packages("fst")
