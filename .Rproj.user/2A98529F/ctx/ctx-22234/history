d <- readLines(f, encoding="UTF-8")
dd <- strsplit(d, "\t")
table(sapply(dd, length))
fun <- function(x) {
r <- rep("", 22)
r[1:length(x)] <- x
r
}
ddd <- lapply(dd, fun)
v <- do.call(rbind, ddd)
v[1:3, 1:8]
colnames(v) <- v[1,]
v <- v[-1,]
v <- data.frame(v, stringsAsFactors=FALSE)
for (i in c('LongD', 'LongM', 'LongS', 'LatD', 'LatM', 'LatS')) {
v[, i] <- as.numeric(v[,i])
}
v$lon <- -1 * (v$LongD + v$LongM / 60 + v$LongS / 3600)
v$lat <- v$LatD + v$LatM / 60 + v$LatS / 3600
v$lat[v$LatH == 'S'] <- -1 * v$lat[v$LatH == 'S']
head(v)
cn <- spat_data("pt_countries") #terra
class(cn)
plot(cn, xlim=c(-120, -40), ylim=c(-40,40), axes=TRUE)
points(v$lon, v$lat, cex=.5, col='red')
sp <- vect(v, crs="+proj=longlat +datum=WGS84")
v$COUNTRY <- toupper(v$COUNTRY)
sp$COUNTRY <- toupper(sp$COUNTRY)
vv <- intersect(sp[, "COUNTRY"], cn)
names(vv)[1] <- "ptCountry"
table(vv$COUNTRY)
vv$COUNTRY[is.na(vv$COUNTRY)] <- ""
vv$COUNTRY[vv$COUNTRY=="UNITED STATES, THE"] <- "UNITED STATES"
vv$COUNTRY[vv$COUNTRY=="BRASIL"] <- "BRAZIL"
i <- which(toupper(vv$ptCountry) != vv$COUNTRY)
i
as.data.frame(vv[i,])
plot(cn, xlim=c(-120, -40), ylim=c(-40,40), axes=TRUE)
points(sp, cex=.25, pch='+', col='blue')
points(vv[i,], col='red', pch='x', cex=1.5)
spc <- tapply(v$SPECIES, sp$COUNTRY, function(x)length(unique(x)) )
spc <- data.frame(COUNTRY=names(spc), nspp = spc)
# merge with country SpatVector --- fix the names in the polygons this time
cn$COUNTRY[cn$COUNTRY=="UNITED STATES, THE"] <- "UNITED STATES"
cn$COUNTRY[cn$COUNTRY=="BRASIL"] <- "BRAZIL"
cns <- merge(cn, spc, by="COUNTRY", all.x=TRUE)
plot(cns, "nspp", col=rev(terrain.colors(25)), breaks=c(1,5,10,20,30,40,90))
tb <- table(v[ c('COUNTRY', 'SPECIES')])
# a big table
dim(tb)
## [1]  16 195
# show two columns
tb[,2:3]
# the CRS we want
laea <-"+proj=laea  +lat_0=0 +lon_0=-80"
clb <- project(cn, laea)
pts <- project(sp, laea)
plot(clb)
points(pts, col='red', cex=.5)
r <- rast(clb)
# 200 km = 200000 m
res(r) <- 200000
rich <- rasterize(pts, r, "SPECIES", function(x, ...) length(unique(na.omit(x))))
plot(rich)
lines(clb)
obs <- rasterize(pts, r, field="SPECIES", fun=function(x, ...)length((na.omit(x))) )
plot(obs)
lines(clb)
f <- system.file("WILDPOT.txt", package="rspat")
f <- system.file("WILDPOT.txt", package="rspat")
f
basename(f)
d <- readLines(f, encoding="UTF-8")
dd <- strsplit(d, "\t")
View(dd)
table(sapply(dd, length))
View(dd)
fun <- function(x) {
r <- rep("", 22)
r[1:length(x)] <- x
r
}
ddd <- lapply(dd, fun)
View(ddd)
v <- do.call(rbind, ddd)
v[1:3, 1:8]
colnames(v) <- v[1,]
v <- v[-1,]
v <- data.frame(v, stringsAsFactors=FALSE)
View(v)
#v是数据集
for (i in c('LongD', 'LongM', 'LongS', 'LatD', 'LatM', 'LatS')) {
v[, i] <- as.numeric(v[,i])
}
v$lon <- -1 * (v$LongD + v$LongM / 60 + v$LongS / 3600)
v$lat <- v$LatD + v$LatM / 60 + v$LatS / 3600
v$lat[v$LatH == 'S'] <- -1 * v$lat[v$LatH == 'S']
head(v)
View(v)
library(rspat)
f <- system.file("WILDPOT.txt", package="rspat")
basename(f)
d <- readLines(f, encoding="UTF-8")
dd <- strsplit(d, "\t")
table(sapply(dd, length))
fun <- function(x) {
r <- rep("", 22)
r[1:length(x)] <- x
r
}
ddd <- lapply(dd, fun)
v <- do.call(rbind, ddd)
v[1:3, 1:8]
colnames(v) <- v[1,]
v <- v[-1,]
v <- data.frame(v, stringsAsFactors=FALSE)
for (i in c('LongD', 'LongM', 'LongS', 'LatD', 'LatM', 'LatS')) {
v[, i] <- as.numeric(v[,i])
}
v$lon <- -1 * (v$LongD + v$LongM / 60 + v$LongS / 3600)
v$lat <- v$LatD + v$LatM / 60 + v$LatS / 3600
v$lat[v$LatH == 'S'] <- -1 * v$lat[v$LatH == 'S']
head(v)
#v是数据集
#多边形地形框架
cn <- spat_data("pt_countries") #terra
class(cn)
# the CRS we want
laea <-"+proj=laea  +lat_0=0 +lon_0=-80"
clb <- project(cn, laea)
pts <- project(sp, laea)
plot(clb)
points(pts, col='red', cex=.5)
r <- rast(clb)
# 200 km = 200000 m
res(r) <- 200000
rich <- rasterize(pts, r, "SPECIES", function(x, ...) length(unique(na.omit(x))))
plot(rich)
lines(clb)
obs <- rasterize(pts, r, field="SPECIES", fun=function(x, ...)length((na.omit(x))) )
plot(obs)
lines(clb)
gc()
library(rspat)
f <- system.file("WILDPOT.txt", package="rspat")
basename(f)
d <- readLines(f, encoding="UTF-8")
dd <- strsplit(d, "\t")
table(sapply(dd, length))
fun <- function(x) {
r <- rep("", 22)
r[1:length(x)] <- x
r
}
ddd <- lapply(dd, fun)
v <- do.call(rbind, ddd)
v[1:3, 1:8]
colnames(v) <- v[1,]
v <- v[-1,]
v <- data.frame(v, stringsAsFactors=FALSE)
for (i in c('LongD', 'LongM', 'LongS', 'LatD', 'LatM', 'LatS')) {
v[, i] <- as.numeric(v[,i])
}
v$lon <- -1 * (v$LongD + v$LongM / 60 + v$LongS / 3600)
v$lat <- v$LatD + v$LatM / 60 + v$LatS / 3600
v$lat[v$LatH == 'S'] <- -1 * v$lat[v$LatH == 'S']
head(v)
#v是数据集
#多边形地形框架
cn <- spat_data("pt_countries") #terra
class(cn)
#绘图
plot(cn, xlim=c(-120, -40), ylim=c(-40,40), axes=TRUE)
points(v$lon, v$lat, cex=.5, col='red')
sp <- vect(v, crs="+proj=longlat +datum=WGS84")
v$COUNTRY <- toupper(v$COUNTRY)
sp$COUNTRY <- toupper(sp$COUNTRY)
vv <- intersect(sp[, "COUNTRY"], cn)
names(vv)[1] <- "ptCountry"
table(vv$COUNTRY)
vv$COUNTRY[is.na(vv$COUNTRY)] <- ""
vv$COUNTRY[vv$COUNTRY=="UNITED STATES, THE"] <- "UNITED STATES"
vv$COUNTRY[vv$COUNTRY=="BRASIL"] <- "BRAZIL"
i <- which(toupper(vv$ptCountry) != vv$COUNTRY)
i
as.data.frame(vv[i,])
plot(cn, xlim=c(-120, -40), ylim=c(-40,40), axes=TRUE)
points(sp, cex=.25, pch='+', col='blue')
points(vv[i,], col='red', pch='x', cex=1.5)
spc <- tapply(v$SPECIES, sp$COUNTRY, function(x)length(unique(x)) )
spc <- data.frame(COUNTRY=names(spc), nspp = spc)
# merge with country SpatVector --- fix the names in the polygons this time
cn$COUNTRY[cn$COUNTRY=="UNITED STATES, THE"] <- "UNITED STATES"
cn$COUNTRY[cn$COUNTRY=="BRASIL"] <- "BRAZIL"
cns <- merge(cn, spc, by="COUNTRY", all.x=TRUE)
plot(cns, "nspp", col=rev(terrain.colors(25)), breaks=c(1,5,10,20,30,40,90))
tb <- table(v[ c('COUNTRY', 'SPECIES')])
# a big table
dim(tb)
## [1]  16 195
# show two columns
tb[,2:3]
# the CRS we want
laea <-"+proj=laea  +lat_0=0 +lon_0=-80"
clb <- project(cn, laea)
pts <- project(sp, laea)
plot(clb)
points(pts, col='red', cex=.5)
r <- rast(clb)
# 200 km = 200000 m
res(r) <- 200000
rich <- rasterize(pts, r, "SPECIES", function(x, ...) length(unique(na.omit(x))))
plot(rich)
lines(clb)
obs <- rasterize(pts, r, field="SPECIES", fun=function(x, ...)length((na.omit(x))) )
plot(obs)
lines(clb)
library(rspat)
f <- system.file("WILDPOT.txt", package="rspat")
basename(f)
d <- readLines(f, encoding="UTF-8")
dd <- strsplit(d, "\t")
table(sapply(dd, length))
fun <- function(x) {
r <- rep("", 22)
r[1:length(x)] <- x
r
}
ddd <- lapply(dd, fun)
v <- do.call(rbind, ddd)
v[1:3, 1:8]
colnames(v) <- v[1,]
v <- v[-1,]
v <- data.frame(v, stringsAsFactors=FALSE)
for (i in c('LongD', 'LongM', 'LongS', 'LatD', 'LatM', 'LatS')) {
v[, i] <- as.numeric(v[,i])
}
v$lon <- -1 * (v$LongD + v$LongM / 60 + v$LongS / 3600)
v$lat <- v$LatD + v$LatM / 60 + v$LatS / 3600
v$lat[v$LatH == 'S'] <- -1 * v$lat[v$LatH == 'S']
fwrite(v,'~/Desktop')
fwrite(v,'~/Users/mizexin/Desktop/')
fwrite(v,~/Users/mizexin/Desktop/)
fwrite(v,'~/Users/mizexin/Desktop/v.csv')
fwrite(v,'~/Users/mizexin/Desktop/v.csv',sep = '')
View(v)
write_excel_csv(v,'~/Desktop/v.csv')
fwrite(v,'~/Desktop/v.csv',sep = '')
library(data.table)
fwrite(v,'~/Desktop/v.csv')
v <- fread('~/Desktop/v.csv')
library(rgdal)
v <- fread('~/Desktop/v.csv')
cn <- sp_data('pt_countries')
sp <- v
coordinates(sp) <- ~lon + lat
proj4string(sp) <- CRS("+proj=longlat +datum=WGS84")
projection(cn) <- "+proj=longlat +datum=WGS84"
clb <- spTransform(cn, laea)
pts <- spTransform(sp, laea)
r <- raster(clb)
res(r) <- 200000
rich <- rasterize(pts, r, 'SPECIES', function(x, ...) length(unique(na.omit(x))))
plot(rich)
plot(clb, add=TRUE)
library(rspat)
v <- fread('~/Desktop/v.csv')
cn <- sp_data('pt_countries')
library(rspat)
v <- fread('~/Desktop/v.csv')
cn <- sp_data('pt_countries')
library(raster)
library(rspatial)
v <- fread('~/Desktop/v.csv')
cn <- sp_data('pt_countries')
install.packages(rspatial)
install.packages('rspatial')
cn <- sp_data('pt_countries')
if (!require("rspatial")) devtools::install_github('rspatial/rspatial')
# if (!require("rspatial")) devtools::install_github('rspatial/rspatial')
v <- fread('~/Desktop/v.csv')
cn <- sp_data('pt_countries')
sp <- v
#v是数据集
#多边形地形框架
cn <- spat_data("pt_countries") #terra
library(rspat)
f <- system.file("WILDPOT.txt", package="rspat")
basename(f)
d <- readLines(f, encoding="UTF-8")
dd <- strsplit(d, "\t")
table(sapply(dd, length))
fun <- function(x) {
r <- rep("", 22)
r[1:length(x)] <- x
r
}
ddd <- lapply(dd, fun)
v <- do.call(rbind, ddd)
v[1:3, 1:8]
colnames(v) <- v[1,]
v <- v[-1,]
v <- data.frame(v, stringsAsFactors=FALSE)
for (i in c('LongD', 'LongM', 'LongS', 'LatD', 'LatM', 'LatS')) {
v[, i] <- as.numeric(v[,i])
}
v$lon <- -1 * (v$LongD + v$LongM / 60 + v$LongS / 3600)
v$lat <- v$LatD + v$LatM / 60 + v$LatS / 3600
v$lat[v$LatH == 'S'] <- -1 * v$lat[v$LatH == 'S']
library(data.table)
library(spatstat)
install.packages('spatstat')
library(spatstat)
# if (!require("rspatial")) devtools::install_github('rspatial/rspatial')
v <- fread('~/Desktop/v.csv')
cn <- sp_data('pt_countries')
cn <- sp_data('pt_countries')
v <- fread('~/Desktop/v.csv')
#v是数据集
#多边形地形框架
cn <- spat_data("pt_countries") #terra
#绘图
plot(cn, xlim=c(-120, -40), ylim=c(-40,40), axes=TRUE)
points(v$lon, v$lat, cex=.5, col='red')
# if (!require("rspatial")) devtools::install_github('rspatial/rspatial')
v <- fread('~/Desktop/v.csv')
cn <- sp_data('pt_countries')
cn <- sp_data('pt_countries')
# if (!require("rspatial")) devtools::install_github('rspatial/rspatial')
v <- fread('~/Desktop/v.csv')
cn <- sp_data('pt_countries')
# if (!require("rspatial")) devtools::install_github('rspatial/rspatial')
v <- fread('~/Desktop/v.csv')
# if (!require("rspatial")) devtools::install_github('rspatial/rspatial')
v <- data.frame('~/Desktop/v.csv')
cn <- sp_data('pt_countries')
sp <- v
#v是数据集
#多边形地形框架
v <- data.frame('~/Desktop/v.csv')
cn <- spat_data("pt_countries") #terra
library(rspat)
library(rspatial)
library(spatstat)
# if (!require("rspatial")) devtools::install_github('rspatial/rspatial')
v <- data.frame('~/Desktop/v.csv')
cn <- sp_data('pt_countries')
sp <- v
coordinates(sp) <- ~lon + lat
proj4string(sp) <- CRS("+proj=longlat +datum=WGS84")
library(rgdal)
library(raster)
library(rspat)
library(rspatial)
library(spatstat)
# if (!require("rspatial")) devtools::install_github('rspatial/rspatial')
v <- data.frame('~/Desktop/v.csv')
cn <- sp_data('pt_countries')
sp <- v
coordinates(sp) <- ~lon + lat
proj4string(sp) <- CRS("+proj=longlat +datum=WGS84")
sp <- v
sp <- SpatialPoints( v[, c('lon', 'lat')],
proj4string=CRS("+proj=longlat +datum=WGS84") )
library(rspat)
f <- system.file("WILDPOT.txt", package="rspat")
basename(f)
d <- readLines(f, encoding="UTF-8")
dd <- strsplit(d, "\t")
table(sapply(dd, length))
fun <- function(x) {
r <- rep("", 22)
r[1:length(x)] <- x
r
}
ddd <- lapply(dd, fun)
v <- do.call(rbind, ddd)
v[1:3, 1:8]
colnames(v) <- v[1,]
v <- v[-1,]
v <- data.frame(v, stringsAsFactors=FALSE)
for (i in c('LongD', 'LongM', 'LongS', 'LatD', 'LatM', 'LatS')) {
v[, i] <- as.numeric(v[,i])
}
v$lon <- -1 * (v$LongD + v$LongM / 60 + v$LongS / 3600)
v$lat <- v$LatD + v$LatM / 60 + v$LatS / 3600
v$lat[v$LatH == 'S'] <- -1 * v$lat[v$LatH == 'S']
library(data.table)
fwrite(v,'~/Desktop/v.csv')
write_excel_csv(v,'~/Desktop/v.csv')
#v是数据集
#多边形地形框架
v <- data.frame('~/Desktop/v.csv')
cn <- spat_data("pt_countries") #terra
#绘图
plot(cn, xlim=c(-120, -40), ylim=c(-40,40), axes=TRUE)
points(v$lon, v$lat, cex=.5, col='red')
sp <- vect(v, crs="+proj=longlat +datum=WGS84")
v$COUNTRY <- toupper(v$COUNTRY)
sp$COUNTRY <- toupper(sp$COUNTRY)
vv <- intersect(sp[, "COUNTRY"], cn)
names(vv)[1] <- "ptCountry"
vv$COUNTRY[is.na(vv$COUNTRY)] <- ""
vv$COUNTRY[vv$COUNTRY=="UNITED STATES, THE"] <- "UNITED STATES"
vv$COUNTRY[vv$COUNTRY=="BRASIL"] <- "BRAZIL"
i <- which(toupper(vv$ptCountry) != vv$COUNTRY)
as.data.frame(vv[i,])
plot(cn, xlim=c(-120, -40), ylim=c(-40,40), axes=TRUE)
points(sp, cex=.25, pch='+', col='blue')
points(vv[i,], col='red', pch='x', cex=1.5)
spc <- tapply(v$SPECIES, sp$COUNTRY, function(x)length(unique(x)) )
spc <- data.frame(COUNTRY=names(spc), nspp = spc)
# merge with country SpatVector --- fix the names in the polygons this time
cn$COUNTRY[cn$COUNTRY=="UNITED STATES, THE"] <- "UNITED STATES"
cn$COUNTRY[cn$COUNTRY=="BRASIL"] <- "BRAZIL"
cns <- merge(cn, spc, by="COUNTRY", all.x=TRUE)
plot(cns, "nspp", col=rev(terrain.colors(25)), breaks=c(1,5,10,20,30,40,90))
tb <- table(v[ c('COUNTRY', 'SPECIES')])
# a big table
dim(tb)
## [1]  16 195
# show two columns
tb[,2:3]
# the CRS we want
laea <-"+proj=laea  +lat_0=0 +lon_0=-80"
clb <- project(cn, laea)
pts <- project(sp, laea)
plot(clb)
points(pts, col='red', cex=.5)
r <- rast(clb)
# 200 km = 200000 m
res(r) <- 200000
rich <- rasterize(pts, r, "SPECIES", function(x, ...) length(unique(na.omit(x))))
plot(rich)
lines(clb)
obs <- rasterize(pts, r, field="SPECIES", fun=function(x, ...)length((na.omit(x))) )
plot(obs)
lines(clb)
# Libraries
library(tidyverse)
library(viridis)
library(hrbrthemes)
library(mapdata)
library(ggplot2)
# Load dataset from github
data <- read.table("~/AIS/2019-stop-result/564071000.csv", sep=",", header=T)
# Get the world polygon
world <- map_data("world")
# plot
ggplot(data, aes(x=g.lon, y=g.lat)) +
geom_polygon(data = world, aes(x=long, y = lat, group = group), fill="grey", alpha=0.3) +
geom_bin2d(bins=100) +
ggplot2::annotate("text", x = 175, y = 80, label="Container", colour = "black", size=4, alpha=1, hjust=1) +
theme_void() +
ylim(-70, 80) +
# scale_fill_viridis(
#   trans = "log",
#   breaks = c(1,10,20,300),
#   # name=" ",
#   guide = guide_legend( keyheight = unit(2.5, units = "mm"), keywidth=unit(10, units = "mm"), label.position = "bottom", title.position = 'top', nrow=1)
# )  +
ggtitle( "" ) +
theme(
legend.position = c(0.8, 0.09),
legend.title=element_text(color="black", size=8),
text = element_text(color = "#22211d"),
plot.title = element_text(size= 13, hjust=0.1, color = "#4e4d47", margin = margin(b = -0.1, t = 0.4, l = 2, unit = "cm")),
)
gc()
# Libraries
library(tidyverse)
library(viridis)
library(hrbrthemes)
library(mapdata)
library(ggplot2)
# Load dataset from github
data <- read.table("~/AIS/2019-stop-result/564071000.csv", sep=",", header=T)
# Get the world polygon
world <- map_data("world")
# plot
ggplot(data, aes(x=g.lon, y=g.lat)) +
geom_polygon(data = world, aes(x=long, y = lat, group = group), fill="grey", alpha=0.3) +
geom_bin2d(bins=100) +
ggplot2::annotate("text", x = 175, y = 80, label="Container", colour = "black", size=4, alpha=1, hjust=1) +
theme_void() +
ylim(-70, 80) +
# scale_fill_viridis(
#   trans = "log",
#   breaks = c(1,10,20,300),
#   # name=" ",
#   guide = guide_legend( keyheight = unit(2.5, units = "mm"), keywidth=unit(10, units = "mm"), label.position = "bottom", title.position = 'top', nrow=1)
# )  +
ggtitle( "" ) +
theme(
legend.position = c(0.8, 0.09),
legend.title=element_text(color="black", size=8),
text = element_text(color = "#22211d"),
plot.title = element_text(size= 13, hjust=0.1, color = "#4e4d47", margin = margin(b = -0.1, t = 0.4, l = 2, unit = "cm")),
)
seine_simp = st_simplify(seine, dTolerance = 2000)  # 2000 m
library(sf)
library(raster)
library(dplyr)
library(spData)
library(spDataLarge)
seine_simp = st_simplify(seine, dTolerance = 2000)  # 2000 m
remotes::install_github("geocompr/geocompkg")
bookdown::render_book("index.Rmd") # to build the book
browseURL("_book/index.html") # to view it
install.packages("sf")
install.packages("raster")
install.packages("spData")
